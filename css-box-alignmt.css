/*
CSS box alignment:
The CSS box alignment module specifies CSS features that relate 
to the alignment of boxes in the various CSS box layout models: 
block layout, table layout, flex layout, and grid layout. The 
module aims to create a consistent method of alignment across 
all of CSS. This document details the general concepts found 
in the specification.


Older alignment methods:
CSS traditionally had very limited alignment capabilities. We 
were able to align text using text-align, center blocks using 
auto margins, and in table or inline-block layouts using the 
vertical-align property. 


Basic examples:
The following examples demonstrate how some of the Box Alignment 
Properties are applied in Grid and Flexbox.

CSS grid layout alignment example:
In this example using grid layout, there is extra space in the 
grid container after laying out the fixed width tracks on the 
inline (main) axis. This space is distributed using justify-content. 
On the block (cross) axis the alignment of the items inside their 
grid areas is controlled with align-items. The first item overrides 
the align-items value set on the group by setting align-self to 
center.

.box {
    display: grid;
    width: 540px;
    grid-template-columns: 120px 120px 120px;
    align-items: start;
    justify-content: space-between;
}

.box :first-child {
    align-self: center;
}

<div class="box">
    <div>One</div>
    <div>Two</div>

    <div>Three
        <br>has
        <br>extra
        <br>text
    </div>
    
    <div>Four</div>
    <div>Five</div>
    <div>Six</div>
</div>


Flexbox Alignment Example:
In this example, three flex items are aligned on the main axis using 
justify-content and on the Cross Axis using align-items. The first 
item overrides the align-items set on the group by setting align-self 
to center.

.box {
    display: flex;
    align-items: flex-start;
    justify-content: space-between;
}

.box :first-child {
    align-self: center;
}

<div class="box">
    <div>One</div>
    <div>Two</div>

    <div>Three
        <br>has
        <br>extra
        <br>text
    </div>
</div>


Relationship to writing modes:
Alignment is linked to writing modes in that when we align an 
item we do not consider whether we are aligning it to the physical 
dimensions of top, right, bottom and left. Instead we describe 
alignment in terms of the start and end of the particular dimension 
we are working with. This ensures that alignment works in the same 
way whichever writing mode the document has.


Two dimensions of alignment:
When using the box alignment properties you will align content on 
one of two axes — the inline (or main) axis, and the block (or cross) 
axis. The inline axis is the axis along which words in a sentence 
flow in the writing mode being used — for English, for example, the 
inline axis is horizontal. The block axis is the axis along which 
blocks, such as paragraph elements, are laid out and it runs across 
the Inline axis.

When aligning items on the inline axis you will use the properties 
which begin with justify-:
justify-items
justify-self
justify-content

When aligning items on the block axis you will use the properties 
that begin align-:
align-items
align-self
align-content

Flexbox adds an additional complication in that the above is true 
when flex-direction is set to row. The properties are swapped when 
flexbox is set to column. Therefore, when working with flexbox it 
is easier to think about the main and cross axis rather than inline 
and block. The justify- properties are always used to align on the 
main axis, the align- properties on the cross axis.


The alignment subject:
The alignment subject is the thing that is being aligned. For 
justify-self or align-self, or when setting these values as a 
group with justify-items or align-items, this will be the margin 
box of the element that this property is being used on. The 
justify-content and align-content properties differ per layout 
method.




















vertical-align

*/
