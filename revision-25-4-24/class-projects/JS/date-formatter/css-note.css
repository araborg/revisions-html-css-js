/* 
CSS:
1. 
*,
*::after,
*::before {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}


2. 
What effect will border has on this?

*,
*::after,
*::before {
    margin: 0;
    padding: 0;
    box-sizing: border-box;

    border: 2px solid red;
}


3. 
margin: auto
auto:
The browser selects a suitable margin to use. For example, in certain 
cases this value can be used to center an element.

Horizontal centering
You can horizontally center an element within its parent by setting 
margin: 0 auto;.

A more common method to center an element horizontally is by setting 
display: flex; and justify-content: center; on a container, which 
centers its flex item children.


4.
Gap: 
The gap CSS shorthand property sets the gaps (also called gutters) 
between rows and columns. This property applies to multi-column, 
flex, and grid containers.

This property is a shorthand for the following CSS properties:
column-gap
row-gap

The visible space between elements may differ from the provided gap 
value because margins, padding, and distributed alignment may increase 
the separation between elements beyond what is determined by gap.

The visible space between elements may differ from the provided gap 
value because margins, padding, and distributed alignment may 
increase the separation between elements beyond what is determined 
by gap.


5.
Why use 100% for font?
font-size: 100%;

font-size:
The font-size CSS property sets the size of the font. Changing the font size also updates the sizes of the font size-relative <length> units, such as em, ex, and so forth.

<percentage>
A positive <percentage> value, relative to the parent element's font size.



6.
appearance: none;

The appearance CSS property is used to display UI elements with 
platform-specific styling, based on the operating system's theme.

Before standardization, this property allowed elements to be shown 
as widgets, such as buttons or check boxes. It was considered a 
misfeature and authors are encouraged to use only standard keywords 
now.

Note: If you wish to use this property on websites, you should 
test it very carefully. Although it is supported in most modern 
browsers, its implementation varies. In older browsers, even the 
keyword none does not have the same effect on all form elements 
across different browsers, and some do not support it at all. 
The differences are smaller in the newest browsers.

Values:
none
Hides certain features of widgets, such as arrow displayed in 
select element, indicating that list can be expanded.

auto
Acts as none on elements with no special styling.


7.
Transition:
The transition CSS property is a shorthand property for 
transition-property, 
transition-duration, 
transition-timing-function, 
transition-delay, and 
transition-behavior.

Transitions enable you to define the transition between two states of an element. 
Different states may be defined using pseudo-classes like :hover or :active or 
dynamically set using JavaScript.

transition:
    all 200ms,
    opacity 400ms;

In this case, all the properties that change as the element changes state will 
transition with a duration of 200ms except for opacity, which will take 400ms 
to transition.

Basic example
In this example, when the user hovers over the element, there is a one-second 
delay before the four-second font-size transition occurs.

HTML:
<a class="target">Hover over me</a>

CSS
We include two <time> values. In the transition shorthand, the first <time> 
value is the transition-duration. The second time value is the transition-delay. 
Both default to 0s if omitted.

CSS:
.target {
    font-size: 14px;
    transition: font-size 4s 1s;
}

.target:hover {
    font-size: 36px;
}


8.
Pointer-events:
The pointer-events CSS property sets under what circumstances (if any) a 
particular graphic element can become the target of pointer events.

In addition to indicating that the element is not the target of pointer 
events, the value none instructs the pointer event to go "through" the 
element and target whatever is "underneath" that element instead.

Note that preventing an element from being the target of pointer events 
by using pointer-events does not necessarily mean that pointer event 
listeners on that element cannot or will not be triggered. If one of the 
element's children has pointer-events explicitly set to allow that child 
to be the target of pointer events, then any events targeting that child 
will pass through the parent as the event travels along the parent chain, 
and trigger event listeners on the parent as appropriate. Of course any 
pointer activity at a point on the screen that is covered by the parent 
but not by the child will not be caught by either the child or the parent 
(it will go "through" the parent and target whatever is underneath).

Elements with pointer-events: none will still receive focus through 
sequential keyboard navigation using the Tab key.




JS:
1.


2.


3.


*/
