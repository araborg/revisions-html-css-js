/* 
HTML:
1. main
The <main> HTML element represents the dominant content of the <body> 
of a document. The main content area consists of content that is 
directly related to or expands upon the central topic of a document, 
or the central functionality of an application.

A document mustn't have more than one <main> element.

Usage notes:
The content of a <main> element should be unique to the document. 
Content that is repeated across a set of documents or document 
sections such as sidebars, navigation links, copyright information, 
site logos, and search forms shouldn't be included unless the search 
form is the main function of the page.

<main> doesn't contribute to the document's outline; that is, unlike 
elements such as <body>, headings such as h2, and such, <main> doesn't
affect the DOM's concept of the structure of the page. It's strictly
informative.




CSS:
1. One of d standard rules of CSS
*,
*::after,
*::before {
    margin: 0;
    padding: 0;

    box-sizing: border-box;
}


2. What effect will border has on this?
*,
*::after,
*::before {
    border: 2px solid red;
}


3. margin: auto
auto: The browser selects a suitable margin to use. For example, 
in certain cases this value can be used to center an element.

Horizontal centering:
You can horizontally center an element within its parent by setting 
margin: 0 auto;.

A more common method to center an element horizontally is by setting 
display: flex; and justify-content: center; 
on a container, which centers its flex item children.


4. Gap: 
The gap CSS shorthand property sets the gaps (also called gutters) 
between rows and columns. This property applies to multi-column, 
flex, and grid containers.

This property is a shorthand for the following CSS properties:
column-gap, row-gap

The visible space between elements may differ from the provided 
gap value because margins, padding, and distributed alignment may 
increase the separation between elements beyond what is determined 
by gap.


5. Why use 100% for font?
font-size: 100%;

font-size:
The font-size CSS property sets the size of the font. Changing 
the font size also updates the sizes of the font size-relative 
<length> units, such as em, ex, and so forth.

Percentage: is relative to the parent element's font size.


6. appearance: none;
The appearance CSS property is used to display UI elements with 
platform-specific styling, based on the operating system's theme.

Before standardization, this property allowed elements to be shown 
as widgets, such as buttons or check boxes. It was considered a 
misfeature and authors are encouraged to use only standard keywords 
now.

Note: If you wish to use this property on websites, you should 
test it very carefully. Although it is supported in most modern 
browsers, its implementation varies. In older browsers, even the 
keyword none does not have the same effect on all form elements 
across different browsers, and some do not support it at all. 
The differences are smaller in the newest browsers.

Values:
none: Hides certain features of widgets, such as arrow displayed 
in select element, indicating that list can be expanded.

auto: Acts as none on elements with no special styling.


7. Transition:
The transition CSS property is a shorthand property for: 
transition-property, 
transition-duration, 
transition-timing-function, 
transition-delay, and 
transition-behavior.

Transitions enable you to define the transition between two states 
of an element. Different states may be defined using pseudo-classes 
like :hover or :active or dynamically set using JavaScript.

transition:
    all 200ms,
    opacity 400ms;

In this case, all the properties that change as the element changes 
state will transition with a duration of 200ms except for opacity, 
which will take 400ms to transition.

Basic example:
In this example, when the user hovers over the element, there is a 
one-second delay before the four-second font-size transition occurs.

HTML:
<a class="target">Hover over me</a>

CSS:
.target {
    font-size: 14px;
    transition: font-size 4s 1s;
}

.target:hover {
    font-size: 36px;
}

We include two <time> values. In the transition shorthand, the first 
<time> value is the transition-duration. The second time value is the 
transition-delay. Both default to 0s if omitted.


8. Pointer-events:
The pointer-events CSS property sets under what circumstances (if any) 
a particular graphic element can become the target of pointer events.

In addition to indicating that the element is not the target of pointer 
events, the value none instructs the pointer event to go "through" the 
element and target whatever is "underneath" that element instead.

Note that preventing an element from being the target of pointer events 
by using pointer-events does not necessarily mean that pointer event 
listeners on that element cannot or will not be triggered. If one of the 
element's children has pointer-events explicitly set to allow that child 
to be the target of pointer events, then any events targeting that child 
will pass through the parent as the event travels along the parent chain, 
and trigger event listeners on the parent as appropriate. Of course any 
pointer activity at a point on the screen that is covered by the parent 
but not by the child will not be caught by either the child or the parent 
(it will go "through" the parent and target whatever is underneath).

Elements with pointer-events: none; will still receive focus through 
sequential keyboard navigation using the Tab key.


9. Border effect:
.dropdown-container {
    position: relative;

    width: 50%;
    margin: 40px auto;

    
    This totally affected d appearancee of the container
    border: 2px solid orange; 
    
}


10. Using d width (50%) in .dropdown-container, d parent container, 
to control d width (100%) in select elemt, child elemt.

.dropdown-container {
    width: 50%;
}

select {
    width: 100%;
}


11. Selecting options in select elemt:
select option {
    color: red;
}


12. Relative & Absolute
Position: absolute; on d .select-icon was used in relative to 
.dropdown-container, wc is d parant container for both d icon
and d select elemt.




JS:
1. Constructor 
A constructor is like a regular function, but starts with a capital 
letter, and is initialized with the new operator.

For example, you can use the Date() constructor with the new operator 
to create a new Date object that returns a string with the current 
date and time:

const currentDate = new Date();

console.log(currentDate); 
// Tue Jul 30 2024 13:19:11 GMT+0100 (West Africa Standard Time)


2. getDate()
This method returns a number between 1 and 31 that represents the 
day of the month for that date. 

const date = new Date();

const day = date.getDate();
console.log(day); // 30


3. getMonth()
This method returns a number between 0 and 11. This represents 
the month for the date provided, where 0 is January and 11 is 
December. Because the number this method returns is zero-based, 
you need to add 1 to it to get the expected month number.

const month = date.getMonth() + 1;
console.log(month); // 7


4. getFullYear()
This method returns a number which represents the year for the 
provided date.

const year = date.getFullYear();
console.log(year); // 2024


5. getHours()
This method returns a number between 0 and 23. This represents 
the hour for the provided date, where 0 is midnight and 23 is 
11 p.m.

const hours = date.getHours();
console.log(hours); // 13


6. getMinutes()
This method returns a number between 0 and 59 which represents 
the minutes for the provided date.

const minutes = date.getMinutes();
console.log(minutes); // 30


7. Change event
In JavaScript, the change event is used to detect when the value 
of an HTML element has changed:

element.addEventListener("change", () => {});


8. Switch statement 
A switch statement is used to compare/match an expression 
against multiple possible values and execute different code 
blocks based on the match. It's commonly used for branching 
logic.

E.g: Switch statement

This looks like an if statement: if (dayOfWeek) {}
switch (dayOfWeek) {}

switch (dayOfWeek) {
    // if dayOfWeek equals 1, then console.log("It's Monday!") 
    will be executed and so on.
    
    case 1: 
        console.log("It's Monday!");
        break;

    case 2:
        console.log("It's Tuesday!");
        break;
    // ...cases for other workdays

    default:
        console.log("It's the weekend!");
}


9. Case clause
A case clause in the switch statement checks for a match against 
the expression, expr, in the bracket of the switch statement, 
followed by code to run if there's a match.

switch (expr) {
    case expressn to match with expr
        if there is a match, run ds code
}


10. Split('-')
The split() method is used to divide a string into substrings 
based on a specified separator. It then returns these substrings
as elements of an array.

The split method takes in a parameter known as a separator. The 
separator is used to tell the computer where each split should 
occur.

Here is an example of using an empty string as a separator:
const str = "hello";
str.split(""); // ["h", "e", "l", "l", "o"]

Other examples of separators can include a space " ", or a 
hyphen "-". If you don't provide a separator, the method will 
return an array with the original string as the only element.

const str = "hello";
str.split(); // ["hello"]


11. reverse()
To reverse an array of elements, you can use the reverse method. 
This method reverses the order of the elements in the array in 
place. The first element becomes the last, and the last element 
becomes the first.

N.B: reverse() works with arrays and not strings.

const str = "reverse";
console.log(str.reverse());
// TypeError: str.reverse is not a function

const arr = ["r", "e", "v", "e", "r", "s", "e"];
console.log(arr.reverse());
// ['e', 's', 'r', 'e', 'v', 'e', 'r']


12. join()
This method takes an array of elements and joins them into 
a string. Similar to the split method, the join method also 
takes an optional separator. If you don't provide a separator, 
the default separator is a comma.

N.B: join() converts an array to string
 

13. Break statement
If your switch statement is going to have multiple cases, it 
is best practice to include a break statement.

The break statement will tell the JavaScript interpreter to 
stop executing statements. Without adding a break statement 
at the end of each case block, the program will execute the 
code for all matching cases:

switch (someVariable) {
    case 'case123':
        // Write your logic here

        break; // Terminates the switch statement
}


14. Default case:
In a switch statement, the default case is executed when none 
of the previous case conditions match the value being evaluated. 
It serves as a catch-all for any other possible cases.


15. EventListener learnt so far:
addEventListener('click', () => {})

addEventListener('ended', () => {})

addEventListener('change', () => {})


16.


17.


18.


19.


20.


*/
