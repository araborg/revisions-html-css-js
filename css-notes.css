/*
ASK WHY?????????????????????????

Ths learnt:
1. Wn using flex to center a container, no need for width.

2. As flex-direction: row is to justify-content: center so is
flex-direction: column to align-items: center to center an item.

2. If u think width: 100%; does nt work on a box, increase
it more than 100.

3. U can use width ppty twice in a selector by using min(width).
4. A btn can have background: transparent; and border: none;


5. Impt of box-sizing:
The box-sizing CSS property sets how the total width and height 
of an element is calculated.
    box-sizing: border-box;
    width: 100%;
    border: solid #5B6DCD 10px;
    padding: 5px;

https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing    


6. CSS is all about boxes all along.

7. In case you needed to use borders, use it for most impt containers.
8. Use ROYGBIV for your border colors.
9. Picturize row and column directions.
10. Learn to un(comment) out border(s).

11. Knowing more abt width by cal d actual width and padding.
12. Understand perfectly your website structure (HTML layout).
13. min-width: 75px means width will be 75px and above.
14. max-width: 700px means width will be 700px and below.

15. display: inline means: display d elemts side by side.

16. justify-items: deals with children elemts
The CSS justify-items property defines the default justify-self for all 
items of the box, giving them all a default way of justifying each box 
along the appropriate axis.

The effect of this property is dependent of the layout mode we are in:
In block-level layouts, it aligns the items inside their containing block 
on the inline axis.

For absolutely-positioned elements, it aligns the items inside their 
containing block on the inline axis, accounting for the offset values of 
top, left, bottom, and right.

In table cell layouts, this property is ignored.
In flexbox layouts, this property is ignored.

In grid layouts, it aligns the items inside their grid areas on the inline 
axis 


17. box-shadow: none;
The box-shadow CSS property adds shadow effects around an element's frame. 
You can set multiple effects separated by commas. A box shadow is described 
by X and Y offsets relative to the element, blur and spread radius, and 
color.

box-shadow: 10px 5px 5px red;
box-shadow: inset 5em 1em gold;


18. white-space: pre-wrap;

19. opacity: 0.6;
20. position: relative/absolute.
21. justify-content: start.


22. line-height: The line-height CSS property sets the height of a line 
box. It's commonly used to set the distance between lines of text. 


23. outline-color

24. :focus
25. outline-style: dashed; outline-width: 2px;
26. height: auto;


27. visibility: visible/hidden/collapse;
The visibility CSS property shows or hides an element without changing the layout 
of a document. The property can also hide rows or columns in a <table>.

To both hide an element and remove it from the document layout, set the display 
property to none instead of using visibility.


28. img as e.g. of inline elemets.
29. media(min/max-width: px) {}

30. ul has an invisible default margin of 16px
31. li has an invisible deault left padding of ......
32. Grping more than 2 selectors together if dy have common ppties.

33. width: 100% means d child elemt shd occupy d whole width
of d parent elemt width.


34. align-items:
align-items: stretch/start/end/center. 
The default value is stretch. The CSS align-items property sets the 
align-self value on all DIRECT children as a group. 
In flexbox, it controls the alignment of items on the cross/blk axis. 
In grid layout, it controls the alignment of items on the block axis 
within their grid areas.


35. block/column axis:
CSS grid layout is a two-dimensional layout method enabling the 
laying out of content in rows and columns. Therefore in any grid 
we have two axes. The block or column axis, and the inline or 
row axis.


36. align-self:
align-self: stretch/start/end/center. 
The align-self CSS property overrides a grid or flex item's align-items 
value. 
In grid, it aligns the item inside the grid area. 
In flexbox, it aligns the item on the cross axis.

justify-content/-items/-self

37. justify-content: deals with container
justify-content: start/center/space-between/-around/-evenly.
The CSS justify-content property defines how the browser distributes 
space between and around content items along the main-axis of a flex 
container, and the inline axis of a grid container.


38. justify-self: deals with a single child elemt
justify-self: stretch/start/end/center
The CSS justify-self property sets the way a box is justified inside 
its alignment container along the appropriate axis.


39. The main axis
The main axis is defined by flex-direction, which has four possible values:
row, row-reverse, column, column-reverse
Should you choose row or row-reverse, your main axis will run along the row 
in the inline direction.


39. The cross axis:
The cross axis runs perpendicular to the main axis. Therefore, if your 
flex-direction (main axis) is set to row or row-reverse the cross axis 
runs down the columns.
If your main axis is column or column-reverse then the cross axis runs 
along the rows.


40. Impt of width/height:
Width:
The width CSS property sets an element's width. By default, it sets the 
width of the content area, but if box-sizing is set to border-box, it 
sets the width of the border area.
width: px, rem, em, %, auto

The specified value of width applies to the content area so long as its 
value remains within the values defined by min-width and max-width.

If the value for width is less than the value for min-width, then 
min-width overrides width.
If the value for width is greater than the value for max-width, then 
max-width overrides width.

auto: The browser will calculate and select a width for the 
specified element.

Height:
The height CSS property specifies the height of an element. By default, 
the property defines the height of the content area. If box-sizing is 
set to border-box, however, it instead determines the height of the 
border area.
height: px, rem, em, %, auto

N.B: The min-height and max-height properties override height.

auto: The browser will calculate and select a height for the specified 
element.


41. width: 100%;
It means be as big as the parent element.
That is you want the element to be as big as its parent. The consequence 
is that if you have set margins and paddings on the parent element, the 
element will overflow, which is something you donâ€™t necessarily want.


42. width: auto;
It means use the available space i.e margins and paddings will be 
respected, and the element will not overflow its parent.


43. flex-wrap: nowrap/wrap/wrap-reverse;
The flex-wrap CSS property sets whether flex items are forced onto one 
line or can wrap onto multiple lines. If wrapping is allowed, it sets 
the direction that lines are stacked.


44. row-gap:
The row-gap CSS property sets the size of the gap (gutter) between an 
element's rows.

Early versions of the specification called this property grid-row-gap, 
and to maintain compatibility with legacy websites, browsers will still 
accept grid-row-gap as an alias for row-gap.


45. column-gap
The column-gap CSS property sets the size of the gap (gutter) between an 
element's columns.

Initially a part of Multi-column Layout, the definition of column-gap has 
been broadened to include multiple layout methods. Now specified in CSS 
box alignment, it may be used in multi-column, flexible box, and grid 
layouts.

Early versions of the specification called this property grid-column-gap, 
and to maintain compatibility with legacy websites, browsers will still
accept grid-column-gap as an alias for column-gap.


46.display
The display CSS property sets whether an element is treated as a block or 
inline box and the layout used for its children, such as flow layout, grid 
or flex.

Formally, the display property sets an element's inner and outer display 
types. The outer type sets an element's participation in flow layout; the 
inner type sets the layout of children.

display: inline/inline-block/flex/grid


47. inner and outer display
<display-outside>
These keywords specify the element's outer display type, which is essentially 
its role in flow layout:

1. block
The element generates a block box, generating line breaks both before and after 
the element when in the normal flow.

2. inline
The element generates one or more inline boxes that do not generate line breaks 
before or after themselves. In normal flow, the next element will be on the same 
line if there is space.

48. <display-inside>
These keywords specify the element's inner display type, which defines the type 
of formatting context that its contents are laid out in (assuming it is a 
non-replaced element):

flow;
The element lays out its contents using flow layout (block-and-inline layout).

If its outer display type is inline, and it is participating in a block or inline 
formatting context, then it generates an inline box. Otherwise it generates a block 
container box.

Depending on the value of other properties (such as position, float, or overflow) 
and whether it is itself participating in a block or inline formatting context, 
it either establishes a new block formatting context for its contents or 
integrates its contents into its parent formatting context.

flow-root:
The element generates a block box that establishes a new block formatting context, 
defining where the formatting root lies.

table:
These elements behave like HTML <table> elements. It defines a block-level box.

flex:
The element behaves like a block-level element and lays out its content according 
to the flexbox model.

grid:
The element behaves like a block-level element and lays out its content according 
to the grid model.

ruby:
The element behaves like an inline-level element and lays out its content according 
to the ruby formatting model. It behaves like the corresponding HTML <ruby> elements.


49. fill
The fill attribute has two different meanings. For shapes and text it's a 
presentation attribute that defines the color (or any SVG paint servers like 
gradients or patterns) used to paint the element; for animation it defines 
the final state of the animation.

50. border:
The border shorthand CSS property sets an element's border. It sets the values of 
border-width, border-style, and border-color.

The border property may be specified using one, two, or three of the values listed 
above. The order of the values does not matter.


51. outline
The outline CSS shorthand property sets most of the outline properties in a single 
declaration.

This property is a shorthand for the following CSS properties:
outline-color, outline-style, outline-width

The outline property may be specified using one, two, or three of the values listed 
below. The order of the values does not matter. As with all shorthand properties, 
any omitted sub-values will be set to their init


52. padding/margin:
padding:
The padding CSS shorthand property sets the padding area on all four sides of an 
element at once.
An element's padding area is the space between its content and its border.

margin:
The margin CSS shorthand property sets the margin area on all four sides of an 
element.
The margin area, bounded by the margin edge, extends the border area to include 
an empty area used to separate the element from its neighbors. Its dimensions 
are the margin box width and the margin box height.

Note: Padding creates extra space within an element. In contrast, margin creates 
extra space around an element.


53. z-index
The z-index CSS property sets the z-order of a positioned element and its 
descendants or flex and grid items. Overlapping elements with a larger z-index 
cover those with a smaller one.

For a positioned box (that is, one with any position other than static), the 
z-index property specifies:
- The stack level of the box in the current stacking context.
- Whether the box establishes a local stacking context.

The z-index property is specified as either the keyword auto or an <integer>.

auto:
The box does not establish a new local stacking context. The stack level of 
the generated box in the current stacking context is 0.


54. :not()
The :not() CSS pseudo-class represents elements that do not match a list of 
selectors. 
Since it prevents specific items from being selected, it is known as the 
negation pseudo-class.

The :not() pseudo-class requires a selector list, a comma-separated list of 
one or more selectors, as its argument. The list must not contain another 
negation selector or a pseudo-element, but any other simple, compound, and 
complex selectors are allowed.

55. buttons:
button styles: the background color, text color, the border style, the size, 

button states: 
hover state, focus state, active state, 


56. CSS scrollbars styling
The CSS scrollbars styling module defines properties that you can use for visual 
styling of scrollbars. You can customize the width of the scrollbar as required. 
You can also customize the color of the scrollbar track, which is the background 
of the scrollbar, and the color of the scrollbar thumb, which is the draggable 
handle of the scrollbar.

.poem {
    overflow: scroll;
    scrollbar-width: thin;
    scrollbar-color: red orange;
}

Note: When customizing scrollbars, ensure that the thumb and track have enough 
contrast with the surrounding background. Also ensure that the scrollbar hit 
area is large enough for people who use touch input.


57. inline
The element generates one or more inline boxes that do not generate line breaks 
before or after themselves. In normal flow, the next element will be on the same 
line if there is space.

Note: When browsers that support multi-keyword syntax encounter a display 
property that only has an outer value (e.g., display: block or display: inline), 
the inner value is set to flow (e.g., display: block flow and display: inline 
flow).


*****************************************
CSS box alignment
READ UP
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_alignment

*/
