/*
ASK WHY?????????????????????????

Ths learnt:
1. Wn using flex to center a container, no need for width.

2. As flex-direction: row is to justify-content: center so is
flex-direction: column to align-items: center to center an item.

2. If u think width: 100%; does nt work on a box, increase
it more than 100.

3. U can use width ppty twice in a selector by using min(width).
4. A btn can have background: transparent; and border: none;


5. Impt of box-sizing:
The box-sizing CSS property sets how the total width and height 
of an element is calculated.
    box-sizing: border-box;
    width: 100%;
    border: solid #5B6DCD 10px;
    padding: 5px;

https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing    


6. CSS is all about boxes all along.

7. In case you needed to use borders, use it for most impt containers.
8. Use ROYGBIV for your border colors.
9. Picturize row and column directions.
10. Learn to un(comment) out border(s).

11. Knowing more abt width by cal d actual width and padding.
12. Understand perfectly your website structure (HTML layout).
13. min-width: 75px means width will be 75px and above.
14. max-width: 700px means width will be 700px and below.

15. display: inline means: display d elemts side by side.
16. justify-items: center;
17. box-shadow: none;
18. white-space: pre-wrap;

19. opacity: 0.6;
20. position: relative/absolute.
21. justify-content: start.


22. line-height: The line-height CSS property sets the height of a line 
box. It's commonly used to set the distance between lines of text. 


23. outline-color

24. :focus
25. outline-style: dashed; outline-width: 2px;
26. height: auto;

27. visibility: visible;
28. img as e.g. of inline elemets.
29. media(min/max-width: px) {}

30. ul has an invisible default margin of 16px
31. li has an invisible deault left padding of ......
32. Grping more than 2 selectors together if dy have common ppties.

33. width: 100% means d child elemt shd occupy d whole width
of d parent elemt width.


34. align-items:
align-items: stretch/start/end/center. 
The default value is stretch. The CSS align-items property sets the 
align-self value on all DIRECT children as a group. 
In flexbox, it controls the alignment of items on the cross/blk axis. 
In grid layout, it controls the alignment of items on the block axis 
within their grid areas.


35. block/column axis:
CSS grid layout is a two-dimensional layout method enabling the 
laying out of content in rows and columns. Therefore in any grid 
we have two axes. The block or column axis, and the inline or 
row axis.


36. align-self:
align-self: stretch/start/end/center. 
The align-self CSS property overrides a grid or flex item's align-items 
value. 
In grid, it aligns the item inside the grid area. 
In flexbox, it aligns the item on the cross axis.


37. justify-content:
justify-content: start/center/space-between/-around/-evenly.
The CSS justify-content property defines how the browser distributes 
space between and around content items along the main-axis of a flex 
container, and the inline axis of a grid container.


38. justify-self:
justify-self: stretch/start/end/center
The CSS justify-self property sets the way a box is justified inside 
its alignment container along the appropriate axis.


39. The main axis
The main axis is defined by flex-direction, which has four possible values:
row, row-reverse, column, column-reverse
Should you choose row or row-reverse, your main axis will run along the row 
in the inline direction.


39. The cross axis:
The cross axis runs perpendicular to the main axis. Therefore, if your 
flex-direction (main axis) is set to row or row-reverse the cross axis 
runs down the columns.
If your main axis is column or column-reverse then the cross axis runs 
along the rows.


40. Impt of width/height:
Width:
The width CSS property sets an element's width. By default, it sets the 
width of the content area, but if box-sizing is set to border-box, it 
sets the width of the border area.
width: px, rem, em, %, auto

The specified value of width applies to the content area so long as its 
value remains within the values defined by min-width and max-width.

If the value for width is less than the value for min-width, then 
min-width overrides width.
If the value for width is greater than the value for max-width, then 
max-width overrides width.

auto: The browser will calculate and select a width for the 
specified element.

Height:
The height CSS property specifies the height of an element. By default, 
the property defines the height of the content area. If box-sizing is 
set to border-box, however, it instead determines the height of the 
border area.
height: px, rem, em, %, auto

N.B: The min-height and max-height properties override height.

auto: The browser will calculate and select a height for the specified 
element.


41. width: 100%;
It means be as big as the parent element.
That is you want the element to be as big as its parent. The consequence 
is that if you have set margins and paddings on the parent element, the 
element will overflow, which is something you donâ€™t necessarily want.


42. width: auto;
It means use the available space i.e margins and paddings will be 
respected, and the element will not overflow its parent.


43. flex-wrap: nowrap/wrap/wrap-reverse;
The flex-wrap CSS property sets whether flex items are forced onto one 
line or can wrap onto multiple lines. If wrapping is allowed, it sets 
the direction that lines are stacked.


44. row-gap:
The row-gap CSS property sets the size of the gap (gutter) between an 
element's rows.

Early versions of the specification called this property grid-row-gap, 
and to maintain compatibility with legacy websites, browsers will still 
accept grid-row-gap as an alias for row-gap.


45. column-gap
The column-gap CSS property sets the size of the gap (gutter) between an 
element's columns.

Initially a part of Multi-column Layout, the definition of column-gap has 
been broadened to include multiple layout methods. Now specified in CSS 
box alignment, it may be used in multi-column, flexible box, and grid 
layouts.

Early versions of the specification called this property grid-column-gap, 
and to maintain compatibility with legacy websites, browsers will still
accept grid-column-gap as an alias for column-gap.







*****************************************
CSS box alignment
READ UP
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_alignment

*/
