/*
ASK WHY?????????????????????????

Ths learnt:
1. Wn using flex to center a container, no need to give the 
parent container a width.

2. To center an item horizontally in a container:
- when main-axis is in horizontal direction i.e. flex-direction: 
row; use justify-content: center; 
- when main-axis in vertical i.e. flex-direction: column;
use align-items: center; 

These will centralize the item(s) within the parent container.


3. If u think width: 100%; does nt work on a box/elemt, increase
it more than 100% and see the effect. Same for any other features.

width: 100%; 
It means d child elemt shd occupy d whole width of d parent elemt. 
It means be as big as the parent element i.e you want the child 
element to be as big as its parent. 
The consequence is that if you have set margins and paddings on the 
parent element (and box-sizing is not set to border-box), the element 
will overflow, which is something you donâ€™t necessarily want.

width: auto;
It means use the available space i.e margins and paddings will be 
respected, and the element will not overflow its parent.
The browser will calculate and select a width for the specified 
element.

Impt of width/height:
Width:
The width CSS property sets an element's width. By default, it sets 
the width of the content area, but if box-sizing is set to border-box, 
it sets the width of the border area.
width: px, rem, em, %, auto

The specified value of width applies to the content area so long as its 
value remains within the values defined by min-width and max-width.

If the value for width is less than the value for min-width, then 
min-width overrides width.
If the value for width is greater than the value for max-width, then 
max-width overrides width.


Height:
The height CSS property specifies the height of an element. By default, 
the property defines the height of the content area. If box-sizing is 
set to border-box, however, it instead determines the height of the 
border area.
height: px, rem, em, %, auto

N.B: The min-height and max-height properties override height.

height: auto; 
The browser will calculate and select a height for the specified 
element.


4. U can use width ppty twice in a selector by using min/max-width 
and width.


5. A btn can have: 
background: transparent; 
and 
border: none;

The background shorthand CSS property sets all background style 
properties at once, such as: color, image, origin and size, or 
repeat method. Component properties not set in the background 
shorthand property value declaration are set to their default 
values.


6. Impt of box-sizing:
The box-sizing CSS property sets how the total width and height 
of an element is calculated.

.box {
    box-sizing: border-box;

    width: 100%;
    border: solid #5B6DCD 10px;
    padding: 5px;
}

https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing    


7. In case you needed to use borders, use it for most impt containers.
8. Use ROYGBIV for your border colors.

9. Picturize row(inline-direction) and column(block-direction) 
directions.

10. Learn to un(comment) out border(s).

11. Know more abt actual width by calculating width and padding.
N.B: Padding is a delicate th dt can affect width and height 
either +vely or -vely.

12. Understand perfectly your website structure (HTML layout).
How d elements r arranged and related.
How each division/section is placed.
How many components does each div/section has? 

13. min-width: 75px means width will be 75px and above and not
less.

14. max-width: 700px means width will be 700px and below and 
not higher.

15. display: inline means: display d elemts side by side in a 
horizontal line.

The element generates one or more inline boxes that do not generate 
line breaks before or after themselves. In normal flow, the next 
element will be on the same line if there is space.

Note: When browsers that support multi-keyword syntax encounter 
a display property that only has an outer value (e.g., display: block 
or display: inline), the inner value is set to flow (e.g., 
display: block flow and display: inline flow).


16. flex-wrap: nowrap/wrap/wrap-reverse;
The flex-wrap CSS property sets whether flex items are forced onto one 
line or can wrap onto multiple lines. If wrapping is allowed, it sets 
the direction that lines are stacked.


17. box-shadow: none;
The box-shadow CSS property adds shadow effects around an element's frame. 
You can set multiple effects separated by commas. A box shadow is described 
by X and Y offsets relative to the element, blur and spread radius, and 
color.

box-shadow: 10px 5px 5px red;
box-shadow: inset 5em 1em gold;

The box-shadow property enables you to cast a drop shadow from the frame of 
almost any element. If a border-radius is specified on the element with a 
box shadow, the box shadow takes on the same rounded corners.

Box-shadow generator is an interactive tool allowing you to generate a 
box-shadow.


18. white-space: pre-wrap;
The white-space CSS property sets how white space inside an element 
is handled.


19. opacity: 0.6;
The opacity CSS property sets the opacity of an element. Opacity is the 
degree to which content behind an element is hidden, and is the opposite 
of transparency.

0:	The element is fully transparent (that is, invisible).
1 (default value):	The element is fully opaque (visually solid).


20. position: relative/absolute.
The position CSS property sets how an element is positioned in a document. 
The top, right, bottom, and left properties determine the final location 
of positioned elements.

https://developer.mozilla.org/en-US/docs/Web/CSS/position

Static:
This is d default positioning for HTML elements, where they follow the 
normal flow of the document based on the HTML structure.

The element is positioned according to the Normal Flow of the document. 
The top, right, bottom, left, and z-index properties have no effect. 
This is the default value.


Relative:
The element is positioned according to the normal flow of the document, 
and then offset relative to ITSELF based on the values of top, right, 
bottom, and left. The offset does not affect the position of any other 
elements; thus, the space given for the element in the page layout is 
the same as if position were static.

The element is positioned relative to its original position.
Surrounding elements won't be affected, but there will be space
where the element would have been in the static (original) position.

This value creates a new stacking context when the value of z-index 
is not auto. 


Absolute:
The element is removed from the normal document flow, and no space 
is created for the element in the page layout. The element is 
positioned relative to its closest POSTITIONED ANCESTOR (if any e.g 
a relatively positioned container) or to the initial containing block. 
Its final position is determined by the values of top, right, bottom, 
and left.

This value creates a new stacking context when the value of z-index 
is not auto. The margins of absolutely positioned boxes do not 
collapse with other margins.


Fixed:
The element is removed from the normal document flow, and no space 
is created for the element in the page layout. The element is 
positioned relative to its initial containing block, which is the 
VIEWPORT in the case of visual media. 
Its final position is determined by the values of top, right, 
bottom, and left.

This value always creates a new stacking context. In printed 
documents, the element is placed in the same position on every 
page.

Elements r positioned relative to the viewport and remain fixed 
even when the page is scrolled. There will be no space where 
the element would have been in the static position.


Sticky:
The element is positioned according to the normal flow of the 
document, and then offset relative to its nearest scrolling 
ancestor and containing block (nearest block-level ancestor), 
including table-related elements, based on the values of top, 
right, bottom, and left. The offset does not affect the 
position of any other elements.

This value always creates a new stacking context. Note that a 
sticky element "sticks" to its nearest ancestor that has a 
"scrolling mechanism" (created when overflow is hidden, scroll, 
auto, or overlay), even if that ancestor isn't the nearest 
actually scrolling ancestor.

Elemts r positioned based on the user's scroll position. It 
behaves like a relative elemt until the user scrolls to a 
certain position, after wc it becomes fixed relative to its 
containing elemt or the viewport.


21. CSS is all about boxes all along.

22. line-height: The line-height CSS property sets the height 
of a line box. It's commonly used to set the distance between 
lines of text. 


23. :focus
The :focus CSS pseudo-class represents an element (such as a 
form input) that has received focus. It is generally triggered 
when the user clicks or taps on an element or selects it with 
the keyboard's Tab key.

Note: This pseudo-class applies only to the focused element 
itself. Use :focus-within if you want to select an element 
that contains a focused element.


24. visibility: visible/hidden/collapse;
The visibility CSS property shows or hides an element without changing 
the layout of a document. The property can also hide rows or columns 
in a <table>.

To both hide an element and remove it from the document layout, set the 
display property to none instead of using visibility.


25. img, span, links r e.gs of inline elemets. 
Inline elemts do nt have both height and width properties.

inline-block elemt has both the inline and block display ppties. It has
both height and width properties.

inline-flex: is similar to display: flex; but the container on wc display:
inline-flex; is applied behaves like an inline elemt.

grid: by having grid layouts, you av precise ctrl over both rows and 
columns.

inline-grid: is similar to display: grid; but the container on wc display:
inline-grid; is applied behaves like an inline elemt.

display: none; d elemt will be completely invisible and take up no space 
within d documt.

display:inherit; d child elemt with d display inherit will inherit the 
display value from its parent elemt(eg. div) and act as a block-level 
elemt.

display: initial; sets d display ppty of an elemt to its initial value, 
wc is usu inline for most elemts.


26. media(min/max-width: px) {} for responsiveness.

27. ul/ol has an invisible default margin top and bottom of 16px.
28. ul/ol has an invisible default left padding of 40px.

29. Grp more than 2 selectors together if dy have common ppties.


30. block/column axis:
CSS grid layout is a two-dimensional layout method enabling the 
laying out of content in rows and columns. Therefore in any grid 
we have two axes. The block or column axis, and the inline or 
row axis.


31. The cross axis:
The cross axis runs perpendicular to the main axis. Therefore, if your 
flex-direction (main axis) is set to row or row-reverse the cross axis 
runs down the columns.
If your main axis is column or column-reverse then the cross axis runs 
along the rows.


32. The main axis
The main axis is defined by flex-direction, which has four possible values:
row, row-reverse, column, column-reverse
Should you choose row or row-reverse, your main axis will run along the row 
in the inline direction.
If your main axis is column or column-reverse then the main axis runs 
perpendicularly.


align-content/-items/-self:

33. align-content: start/end/center/space-btw/space-ard
The CSS align-content property sets the distribution of space 
between and around content items along a flexbox's CROSS axis, 
or a grid or block-level element's BLOCK axis of a container. 

It affects space in a container around the content items.

This property has no effect on single line flex containers 
(i.e. ones with flex-wrap: nowrap) but does affect flex
containers with flex-direction: column.


34. align-items: stretch/start/end/center. 
The default value is stretch. The CSS align-items property sets the 
align-self value on all DIRECT children as a group. 

In flexbox, it controls the alignment of items on the cross/blk axis. 

In grid layout, it controls the alignment of items on the block axis 
within their grid areas.


35. align-self: stretch/start/end/center. 
The align-self CSS property overrides a grid or flex item's align-items 
value common to all d children elements and affect only d specified 
child elemt.

In flexbox, it aligns the item on the cross axis.
In grid, it aligns the item inside the grid area. 


justify-content/-items/-self:

36. justify-content: start/center/space-between/-around/-evenly.
The CSS justify-content property defines how the browser distributes 
SPACE between and around content items along the main-axis of a flex 
container, and the inline axis of a grid container. 
It deals with d parent container.


37. justify-items: stretch/center/start/end
The CSS justify-items property defines the default JUSTIFY-SELF for all 
items of the box, giving them all a default way of justifying each box 
along the appropriate axis.

The effect of this property is dependent of the layout mode we are in:
In block-level layouts, it aligns the items inside their individual 
containing block on the inline axis.

In flexbox layouts, this property is ignored.

In grid layouts, it aligns the items inside their grid areas on the 
inline axis 


38. justify-self: stretch/start/end/center
It deals with a single child elemt. The CSS justify-self property sets 
the way a box/item is justified inside its alignment container along 
the appropriate axis.


39. row-gap:
The row-gap CSS property sets the size of the gap (gutter) between an 
element's rows. Rows r in horizontal directions. 

Rows egs:
======================= row
row-gap
======================= row
row-gap
======================= row
row-gap
======================= row


40. column-gap
The column-gap CSS property sets the size of the gap (gutter) between an 
element's columns. Columns r in vertical directions.

Initially a part of Multi-column Layout, the definition of column-gap has 
been broadened to include multiple layout methods. Now specified in CSS 
box alignment, it may be used in multi-column, flexible box, and grid 
layouts.

column egs:
column               column              column              column
####    column-gap    ####  column-gap    ####  column-gap    ####
####    column-gap    ####  column-gap    ####  column-gap    ####
####    column-gap    ####  column-gap    ####  column-gap    ####
####    column-gap    ####  column-gap    ####  column-gap    ####


41. display
The display CSS property sets whether an element is treated as a block or 
inline box and the layout used for its children, such as flow layout, grid 
or flex.

Formally, the display property sets an element's inner and outer display 
types. The outer type sets an element's participation in flow layout; the 
inner type sets the layout of children.

display: inline/inline-block/flex/grid


42. inner and outer display:
<display-outside>
These keywords specify the element's outer display type, which is 
essentially its role in flow layout i.e. participation in flow layout:

1. block:
The element generates a block box, generating line breaks both before 
and after the element when in the normal flow.

2. inline:
The element generates one or more inline boxes that do not generate line 
breaks before or after themselves. In normal flow, the next element will 
be on the same line if there is space.


43. <display-inside>
These keywords specify the element's inner display type, which defines 
the type of formatting context that its contents are laid out in (assuming 
it is a non-replaced element). It sets the layout of children wc can be for 
instance flex, grid etc.


44. fill:
The fill attribute has two different meanings. For shapes and text it's 
a presentation attribute that defines the color (or any SVG paint servers 
like gradients or patterns) used to paint the element; for animation it 
defines the final state of the animation.


45. border:
The border shorthand CSS property sets an element's border. It sets the 
values of border-width, border-style, and border-color.

The border property may be specified using one, two, or three of the 
values listed above. The order of the values does not matter.


46. outline:
The outline CSS shorthand property sets most of the outline properties 
in a single declaration.

This property is a shorthand for the following CSS properties:
outline-width, outline-style, outline-color.

The outline property may be specified using one, two, or three of the 
values listed above. The order of the values does not matter. As with 
all shorthand properties, any omitted sub-values will be set to their 
initial values.


47. padding and margin:
The padding CSS shorthand property sets the padding area on all four 
sides of an element at once. An element's padding area is the space 
between its content and its border.

The margin CSS shorthand property sets the margin area on all four 
sides of an element.
The margin area, bounded by the margin edge, extends the border area 
to include an empty area used to separate the element from its 
neighbors. Its dimensions are the margin box width and the margin 
box height.

Note: Padding creates extra space within an element. In contrast, 
margin creates extra space around an element.


48. z-index
The z-index CSS property sets the z-order of a positioned element 
and its descendants or flex and grid items. Overlapping elements 
with a larger z-index cover those with a smaller one.

For a positioned box (that is, one with any position other than 
static), the z-index property specifies:
- The stack level of the box in the current stacking context.
- Whether the box establishes a local stacking context.

The z-index property is specified as either the keyword auto or 
an <integer>.

z-index: auto;
The box does not establish a new local stacking context. The stack 
level of the generated box in the current stacking context is 0.


49. :not()
The :not() CSS pseudo-class represents elements that do not match a 
list of selectors. Since it prevents specific items from being selected, 
it is known as the negation pseudo-class.

The :not() pseudo-class requires a selector list, a comma-separated 
list of one or more selectors, as its argument. The list must not 
contain another negation selector or a pseudo-element, but any other 
simple, compound, and complex selectors are allowed.

.playlist li:not(:last-child) {
    border-bottom: 1px solid var(--background-color);
}


50. buttons:
button styles: 
the background color, text color, the border style, the size.

button states: hover, focus, active.


51. CSS scrollbars styling
The CSS scrollbars styling module defines properties that you can use 
for visual styling of scrollbars. You can customize the width of the 
scrollbar as required. 
You can also customize the color of the scrollbar track, which is the 
background of the scrollbar, and the color of the scrollbar thumb, 
which is the draggable handle of the scrollbar.

.poem {
    overflow: scroll;
    scrollbar-width: thin;
    scrollbar-color: red orange;
}

Note: When customizing scrollbars, ensure that the thumb and track have 
enough contrast with the surrounding background. Also ensure that the 
scrollbar hit area is large enough for people who use touch input.


52. vertical-align: baseline, top, middle, bottom, sub, text-top.
The vertical-align CSS property sets vertical alignment of an inline, 
inline-block or table-cell box.
You can't use it to vertically align block-level elements.

https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align


53. place-content:
The place-content CSS shorthand property allows you to align content along 
both the block and inline directions at once in a relevant layout system 
such as Grid or Flexbox.

This property is a shorthand for the following CSS properties:
align-content, justify-content

place-content: end space-between;
place-content: space-around start;
place-content: start space-evenly;
place-content: end center;
place-content: end center;


54. place-items:
The CSS place-items shorthand property allows you to align items along 
both the block and inline directions at once in a relevant layout system 
such as Grid or Flexbox. 
If the second value is not set, the first value is also used for it.

This property is a shorthand for the following CSS properties:
align-items, justify-items

place-items: center stretch;
place-items: center start;
place-items: start end;
place-items: end center;
place-items: center;


55. place-self:
The place-self CSS shorthand property allows you to align an individual 
item in both the block and inline directions at once in a relevant layout 
system such as Grid or Flexbox. 
If the second value is not present, the first value is also used for it.

This property is a shorthand for the following CSS properties:
align-self, justify-self

place-self: center stretch;
place-self: center start;
place-self: start end;
place-self: end center;


56. CSS Default Values Reference: 
https://www.w3schools.com/cssref/css_default_values.php

h1:
    display: block;
    font-size: 2em;
    margin-top: 0.67em;
    margin-bottom: 0.67em;
    margin-left: 0;
    margin-right: 0;
    font-weight: bold;

p:	
    display: block;
    margin-top: 1em;
    margin-bottom: 1em;
    margin-left: 0;
    margin-right: 0;

ol:	
    display: block;
    list-style-type: decimal;
    margin-top: 1em;
    margin-bottom: 1em;
    margin-left: 0;
    margin-right: 0;
    padding-left: 40px;

    
ul:	
    display: block;
    list-style-type: disc;
    margin-top: 1em;
    margin-bottom: 1 em;
    margin-left: 0;
    margin-right: 0;
    padding-left: 40px;
    

57. flex-start:
It means the items are all aligned to the start of the main axis. 

While this may all seem a little confusing, the rule to remember is 
that unless you do something to change it, flex items lay themselves 
out in the direction that words are laid out in the language of your 
document along the inline, row axis. Start and flex-start will be 
where the beginning of a sentence of text would start.

If you change flex-direction to one of the reverse values, they will 
lay themselves out from the end axis and in the reverse order to the 
way words are written in the language of your document. Then, start 
and flex-start will change to the end of that axis â€” so to the 
location where your lines would wrap if working in rows, or at the 
end of your last paragraph of text in the block direction.


58. flex-end:
It means the items are all aligned to the end of the main axis. 
End and flex-end will be where the beginning of a sentence of 
text would end.


59. nth-child selectors:
1. ul li:first-child {
    selects d 1st child in a parent container.
} 

2. ul li:last-child {
    selects d last child in a parent container.
} 

3. ul li:nth-child(6) {
    selects d 6th child in a parent container.
} 

4. ul li:nth-child(odd) {
    selects d children at the odd number positions 
    (e.g 1st, 3rd, 5th, 7th, 9th ...) in a parent container.
} 

5. ul li:nth-child(even) {
    selects d children at the even number positions 
    (e.g 2nd, 4th, 6th, 8th, 10th ...) in a parent container.
}

6. ul li:nth-child(3n) {
    selects every child(ren) at positions multiple 
    of 3 in a parent container.
} 

7. ul li:nth-child(n + 5) {
    selects every child(ren) at positions greater than 5, 
    position 5 inclusive.
} 

8. ul li:nth-child(-n + 4) {
    selects every child(ren) at positions lesser than 4, 
    position 4 inclusive.
} 

9. ul li:nth-child(3n + 1) {
    selects every child(ren) at positions multiple of 3 plus 
    1 (eg. position 1, 4, 7, 10 ...) in a parent container.
} 

10. ul li:nth-child(3n - 1) {
    selects every child(ren) at positions multiple of 3 minus 
    1 (eg. position 2, 5, 8 ...) in a parent container.
} 

11. ul li:nth-last-child(4) {
    selects d last 4th child from the end of a parent 
    container or the 4th child from the end.
} 

12. ul li:nth-last-child(4n) {
    selects multipte of last 4th child from the end of a 
    parent container 
} 

13. ul li:not(:first-child) {
    selects every other children apart from the first child.
} 

14. ul li:not(:last-child) {
    selects every other children apart from the last child.
} 


60. Types of alignment:
Positional alignment
Baseline alignment
Distributed alignment


Helpful Hints:
61. Border: 
Use border to chech the initial width and height of an elemt.


62. Padding:
It increases an elemt's width and height.

Every side of an elemt needs padding - it may only 
be applicable at d top & bottom in sm cases.

It can also be helpful in alignmt.


63. Width:
It smtimes affect alignmt.


64. Height and Width go hand in hand with space alignmt.


65. Border:
It can also influence d space available for alignmt.


66. Projects:
Don't recollect what you crammed from a project 
but apply experiene and crictical thinking. Don't
be quick to check soln.


67. CSS Values:
Parent:
    height: auto;

Inner Parent:
    height: 100%;

Child:
    height: 55px;


68. Margin
margin: auto; may be very helpful.


69. CSS box alignment
READ UP

https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_alignment



*****************************************

HTML FORM elemt:
1. <!DOCTYPE html>
The whole essence of this is for the browser to know what 
type of document it's reading.


2. vh unit
It stands for viewport height, and is equal to 1% of the height 
of the viewport. This makes it relative to the viewport height.

body {
    width: 100%;
    height: 100vh;
}


3. Body Default Margin
The body has a default margin of 8px.

Get rid of the horizontal scroll-bar, by setting the body default 
margin added by some browsers to 0.

body {
    width: 100%;
    height: 100vh;

    margin: 0;
}


4. form action and method:
As suggested by the title, you are creating a form. So, after 
the p element, insert a form with an action attribute targeting 
https://register-demo.freecodecamp.org.

The method attribute specifies how to send form-data to the URL 
specified in the action attribute. The form-data can be sent via 
a GET request as URL parameters (with method="get") or via a 
POST request as data in the request body (with method="post").

<form
    action="https://register-demo.freecodecamp.org"
    method="POST"
>

</form>


5. Fieldset
The <fieldset> HTML element is used to group several controls as 
well as labels (<label>) within a web form.

<form action="#">

    <fieldset>
        <legend>Choose your favorite monster</legend>

        <input type="radio" id="kraken" name="monster" value="K" />
        <label for="kraken">Kraken</label>
        
        <br />

        OR: 

        No "for" attribute and id attribute needed 
        <label>
            Kraken 

            <input 
                type="radio" 
                name="monster" 
                value="K" 
            />
        </label>
        
        <br />

        <input type="radio" id="sasquatch" name="monster" value="S" />
        <label for="sasquatch">Sasquatch</label>

    </fieldset>

</form>


6. rem unit
The rem unit stands for root em, and is relative to the font size 
of the <html> element.


7. label
As label elements are inline by default, they are all displayed 
side by side on the same line, making their text hard to read. 

The <label> HTML element represents a caption for an item in 
a user interface.

To explicitly associate a <label> element with an <input> element, 
you first need to add the id attribute to the <input> element. Next, 
you add the for attribute to the <label> element, where the value 
of for is the same as the id in the <input> element.

Alternatively, you can nest the <input> directly inside the <label>, 
in which case the for and id attributes are not needed because the 
association is implicit:

<label>
    Do you like peas?
    <input type="checkbox" name="peas" />
</label>


8. Input's "type" attribute
Specifying the type attribute of a form element is important 
for the browser to know what kind of data it should expect. 
If the type is not specified, the browser will default to text.

The email type only allows emails with a @ and a . in the 
domain. The password type obscures the input, and warns if 
the site does not use HTTPS.

A type of submit is automatically set to submit its nearest 
parent form element.

<form action="https://register-demo.freecodecamp.org" method="POST">

    ..................
    ..................

    <input type="submit" value="Submit" />
</form>


9. required attribute


10. minlength attribute
minlength="8"

Doing so prevents inputs of less than 8 characters being submitted.


11. pattern attribute 


12. [a-z0-5]{8,}
The above is a regular expression which matches eight or more 
lowercase letters or the digits 0 to 5 and set minlength to 8. 

Since minlength is set with the regular expression there is no 
need for minlength attribute again.


13.


14.


15.


16.


17.


18.


19.


20.


1.


2.


3.


4.


5.


6.


7.


8.


9.


10.


1.


2.


3.


4.


5.


6.


7.


8.


9.


10.




*/
